{"version":3,"sources":["Containers/CalcBox/index.js","Components/Button.js","App.js","serviceWorker.js","index.js"],"names":["CalcBox","square","className","Button","name","event","onClick","size","color","Map","ReactMapboxGL","accessToken","draw","MapboxDraw","userProperties","displayControlsDefault","modes","Object","assign","draw_circle","CircleMode","drag_circle","DragCircleMode","direct_select","DirectMode","simple_select","SimpleSelectMode","App","useState","setSquare","updateArea","data","getAll","features","length","unionArea","area","turf","union","rounded_area","Math","round","style","containerStyle","height","width","onStyleLoad","map","addControl","on","onDrawUpdate","zoom","changeMode","initialRadiusInKm","trash","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAWeA,MARf,YAA8B,IAAXC,EAAU,EAAVA,OACjB,OACE,yBAAKC,UAAU,mBACb,8CAAoBD,EAApB,Q,QCSSE,MAZf,YAAmC,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACvB,OACE,yBACEC,QAASD,GAEC,WAATD,GAAqB,kBAAC,IAAD,CAAaG,KAAM,GAAIC,MAAM,uBACzC,YAATJ,GAAsB,kBAAC,IAAD,CAAeG,KAAM,GAAIC,MAAM,uBAC5C,WAATJ,GAAqB,kBAAC,IAAD,CAASG,KAAM,GAAIC,MAAM,yBCK/CC,G,OAAMC,YAAc,CACxBC,YACE,0GAGEC,EAAO,IAAIC,IAAW,CAC1BC,gBAAgB,EAChBC,wBAAwB,EACxBC,MAAOC,OAAOC,OACZ,CACEC,YAAaC,IACbC,YAAaC,IACbC,cAAeC,IACfC,cAAeC,KAEjBb,IAAWG,SAiEAW,MA7Df,WAAgB,IAAD,EACeC,mBAAS,GADxB,mBACN3B,EADM,KACE4B,EADF,KAGPC,EAAa,WACjB,IAAIC,EAAOnB,EAAKoB,SAChB,GAAID,EAAKE,SAASC,OAAS,EAAG,CAC5B,IAAIC,EAAWC,EACXL,EAAKE,SAASC,OAAS,GACzBC,EAAYE,IAAKC,MAAL,MAAAD,IAAI,YAAUN,EAAKE,WAC/BG,EAAOC,IAAKD,KAAKD,IAEjBC,EAAOC,IAAKD,KAAKL,GAEnB,IAAIQ,EAAeC,KAAKC,MAAa,IAAPL,GAAc,IAC5CP,EAAUU,QAEVV,EAAU,IAuBd,OACE,6BACE,kBAACpB,EAAD,CACEiC,MAAM,iCACNC,eAAgB,CACdC,OAAQ,QACRC,MAAO,SAETC,YA3BkB,SAAAC,GACtBA,EAAIC,WAAWpC,GACfmC,EAAIE,GAAG,cAAenB,GACtBiB,EAAIE,GAAG,cAAenB,GACtBiB,EAAIE,GAAG,cAAenB,IAwBlBoB,aAAcpB,EACdqB,KAAM,CAAC,MAET,yBAAKjD,UAAU,eACb,kBAAC,EAAD,CAAQE,KAAK,SAASC,MAzBP,WACnBO,EAAKwC,WAAW,cAAe,CAAEC,kBAAmB,QAyBhD,kBAAC,EAAD,CAAQjD,KAAK,UAAUC,MAtBP,WACpBO,EAAKwC,WAAW,mBAsBZ,kBAAC,EAAD,CAAQhD,KAAK,SAASC,MAnBX,WACfO,EAAK0C,YAoBH,kBAAC,EAAD,CAASrD,OAAQA,MC9EHsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.7c7c4409.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction CalcBox({ square }) {\r\n  return (\r\n    <div className=\"calculation-box\">\r\n      <p>Square figures: {square} m</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CalcBox;\r\n","import React from 'react';\r\nimport { FaRegCircle, FaDrawPolygon, FaTrash } from 'react-icons/fa';\r\n\r\nfunction Button ({ name, event }) {\r\n  return(\r\n    <div\r\n      onClick={event}\r\n    >\r\n      {name === 'Circle' && <FaRegCircle size={26} color=\"rgb(235, 235, 235)\" />}\r\n      {name === 'Polygon' && <FaDrawPolygon size={26} color=\"rgb(235, 235, 235)\" />}\r\n      {name === 'Delete' && <FaTrash size={26} color=\"rgb(235, 235, 235)\" />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Button;","import React, { useState } from \"react\";\nimport {\n  CircleMode,\n  DragCircleMode,\n  DirectMode,\n  SimpleSelectMode\n} from \"mapbox-gl-draw-circle\";\nimport turf from \"turf\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport ReactMapboxGL from \"react-mapbox-gl\";\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\nimport CalcBox from \"./Containers/CalcBox\";\nimport Button from \"./Components/Button\";\nimport \"./App.css\";\n\nconst Map = ReactMapboxGL({\n  accessToken:\n    \"pk.eyJ1IjoiZGlnaXRhbGFwcGxlYmVlIiwiYSI6ImNqem5zcWtmNjA3MmMzbmx2bXhidG54NnYifQ.-hDI8B2B_HxThJxmzVaicw\"\n});\n\nconst draw = new MapboxDraw({\n  userProperties: true,\n  displayControlsDefault: false,\n  modes: Object.assign(\n    {\n      draw_circle: CircleMode,\n      drag_circle: DragCircleMode,\n      direct_select: DirectMode,\n      simple_select: SimpleSelectMode\n    },\n    MapboxDraw.modes\n  )\n});\n\nfunction App() {\n  const [square, setSquare] = useState(0);\n\n  const updateArea = () => {\n    let data = draw.getAll();\n    if (data.features.length > 0) {\n      let unionArea, area;\n      if (data.features.length > 1) {\n        unionArea = turf.union(...data.features);\n        area = turf.area(unionArea);\n      } else {\n        area = turf.area(data);\n      }\n      let rounded_area = Math.round(area * 100) / 100;\n      setSquare(rounded_area);\n    } else {\n      setSquare(0);\n    }\n  };\n\n  const handleMapLoaded = map => {\n    map.addControl(draw);\n    map.on(\"draw.create\", updateArea);\n    map.on(\"draw.delete\", updateArea);\n    map.on(\"draw.update\", updateArea);\n  };\n\n  const onDrawCircle = () => {\n    draw.changeMode(\"draw_circle\", { initialRadiusInKm: 0.5 });\n  };\n\n  const onDrawPolygon = () => {\n    draw.changeMode(\"draw_polygon\");\n  };\n\n  const onDelete = () => {\n    draw.trash();\n  };\n\n  return (\n    <div>\n      <Map\n        style=\"mapbox://styles/mapbox/dark-v9\"\n        containerStyle={{\n          height: \"100vh\",\n          width: \"100vw\"\n        }}\n        onStyleLoad={handleMapLoaded}\n        onDrawUpdate={updateArea}\n        zoom={[14]}\n      />\n      <div className=\"control-box\">\n        <Button name=\"Circle\" event={onDrawCircle} />\n        <Button name=\"Polygon\" event={onDrawPolygon} />\n        <Button name=\"Delete\" event={onDelete} />\n      </div>\n      <CalcBox square={square} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}